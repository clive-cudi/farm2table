/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package subscription_service;

import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.rabbitmq.client.Channel;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.DeliverCallback;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.bson.Document;
import org.bson.conversions.Bson;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;

public class App {
    public final static String QUEUE_NAME = "messages";
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        try {
            System.out.println(new App().getGreeting());

            ConnectionFactory factory = new ConnectionFactory();
            factory.setHost("localhost");
            Connection connection = factory.newConnection();
            Channel channel = connection.createChannel();

            channel.queueDeclare(QUEUE_NAME, false, false, false, null);

            System.out.println("Should be connected");

            System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

            // mongo connection
            String mongoConnectionString = "mongodb://localhost:27017";
            Mongo mongoDB = new Mongo(mongoConnectionString);
            

            MongoDatabase database = mongoDB.init();


            DeliverCallback deliverCallback = ((consumerTag, delivery) -> {
                String message = new String(delivery.getBody(), "UTF-8");

                System.out.println(" [x] Received '" + message + "'");

                Gson gson = new Gson();

                JsonObject subscriptionAlertMessageJsonObject = gson.fromJson(message, JsonObject.class);

                // message.domain == 'placebid' | 'alert'

                // System.out.println(subscriptionAlertMessageJsonObject);

                // fetch all subscriptions matching the category and quantity scope
                MongoCollection<Document> collection = database.getCollection("surplus_subs");
                String messageDomain = subscriptionAlertMessageJsonObject.get("msg_domain").getAsString();


                if (messageDomain.equals("alert")) {
                    // search query
                    System.out.println(messageDomain);
                    String alertOwnerPhone = subscriptionAlertMessageJsonObject.get("owner").getAsString();
                    String alertProductName = subscriptionAlertMessageJsonObject.get("name").getAsString();
                    String alertDescription = subscriptionAlertMessageJsonObject.get("description").getAsString();
                    String alertCategory = subscriptionAlertMessageJsonObject.get("category").getAsString();
                    String alertQuantityVariant = subscriptionAlertMessageJsonObject.get("q_variant").getAsString();
                    double alertQuantity = subscriptionAlertMessageJsonObject.get("quantity").getAsDouble();
                    boolean isBiddable = subscriptionAlertMessageJsonObject.get("isBiddable").getAsBoolean();
                    String alertSpid = subscriptionAlertMessageJsonObject.get("spid").getAsString();
                    Bson categoryFilter = Filters.eq("category", alertCategory);
                    Bson quantityVariantFilter = Filters.eq("q_variant", alertQuantityVariant);
                    Bson quantityRangeFilter = Filters.and(Filters.lt("q_range.from", alertQuantity), Filters.gt("q_range.to", alertQuantity));
                    Bson subscriptionSearchQuery = Filters.and(categoryFilter, quantityRangeFilter, quantityVariantFilter);
                    FindIterable<Document> cursor = collection.find(subscriptionSearchQuery);

                    System.out.println(alertCategory);

                    // ADVANCED
                    // write a program to normalize quantities
                    // e.g crates & kgs

                    List<String> subscriptionCandidateSources = new ArrayList<String>();
                    // System.out.println(cursor);
                    try (final MongoCursor<Document> cursorIterator = cursor.cursor()) {
                        while (cursorIterator.hasNext()) {
                            // System.out.println(cursorIterator.next().get("source"));
                            subscriptionCandidateSources.add(cursorIterator.next().get("source").toString());
                        }
                    }

                    System.out.println(subscriptionAlertMessageJsonObject.get("spid").getAsString());

                    SMSservice smsService = new SMSservice();
                    String alertSMSmessage = String.format("New Surplus Alert\nDetails are as follows:\n---\nDonor info:\nPhone: %s\n---\nProduct details:\nCategory: %s\nName: %s\nDescription: %s\nQuantity measure: %s\nQuantity: %s\n---\nIf Interested, you can place your bid here\n/placebid?spid=%s;enablebids=%s;phone=%s", alertOwnerPhone, alertCategory, alertProductName, alertDescription, alertQuantityVariant, alertQuantity, alertSpid, isBiddable, alertOwnerPhone);


                    System.out.println(alertSMSmessage);
                    System.out.println(subscriptionCandidateSources.toString());
                    smsService.sendBulk(alertSMSmessage, subscriptionCandidateSources.toArray(new String[subscriptionCandidateSources.size()]));
                } else if (messageDomain.equals("placebid")) {
                    // handle sms notification for placebid
                    MongoCollection<Document> surplusProducts = database.getCollection("surplus_products");

                    String placeBidspid = subscriptionAlertMessageJsonObject.get("spid").getAsString();
                    String placeBidsource = subscriptionAlertMessageJsonObject.get("source").getAsString();

                    System.out.println(placeBidspid);

                    Bson placeBidSPIDFilter = Filters.eq("spid", placeBidspid);
                    FindIterable<Document> cursor = surplusProducts.find(placeBidSPIDFilter);

                    List<String> availableBidSource = new ArrayList<String>();
                    // System.out.println(cursor);
                    try (final MongoCursor<Document> cursorIterator = cursor.cursor()) {
                        while (cursorIterator.hasNext()) {
                            availableBidSource.add(cursorIterator.next().get("owner").toString());
                        }
                    }

                    System.out.println(availableBidSource.toString());

                    if (availableBidSource.size() < 1) {
                        return;
                    }

                    SMSservice smSservice = new SMSservice();
                    String bidAlertSMS = String.format("A new bid has been placed for your product.\nFollow this link to view your pending bid requests. /bids?owner=%s;from=%s", availableBidSource.get(0), placeBidsource);

                    smSservice.sendBulk(bidAlertSMS, availableBidSource.toArray(new String[availableBidSource.size()]));
                    
                }
            });

            channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -> { });

        } catch (Exception e) {
            System.out.println("[ERROR]");
            System.out.println(e);
        }
    }

    // public static String[] addToArray(String arr[], String x)
    //   {
    //     String[] newArray = new String[arr.length + 1];
    //     // newArray.
    //       // return the array
    //       return arr;
    //   }
}
